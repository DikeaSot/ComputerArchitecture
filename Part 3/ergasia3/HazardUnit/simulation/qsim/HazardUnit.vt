// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2021 12:19:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    hazardUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module hazardUnit_vlg_sample_tst(
	isJR,
	isJump,
	mustBranch,
	wasJump,
	sampler_tx
);
input  isJR;
input  isJump;
input  mustBranch;
input  wasJump;
output sampler_tx;

reg sample;
time current_time;
always @(isJR or isJump or mustBranch or wasJump)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module hazardUnit_vlg_check_tst (
	flush,
	JRopcode,
	wasJumpOut,
	sampler_rx
);
input  flush;
input [1:0] JRopcode;
input  wasJumpOut;
input sampler_rx;

reg  flush_expected;
reg [1:0] JRopcode_expected;
reg  wasJumpOut_expected;

reg  flush_prev;
reg [1:0] JRopcode_prev;
reg  wasJumpOut_prev;

reg  flush_expected_prev;
reg [1:0] JRopcode_expected_prev;
reg  wasJumpOut_expected_prev;

reg  last_flush_exp;
reg [1:0] last_JRopcode_exp;
reg  last_wasJumpOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	flush_prev = flush;
	JRopcode_prev = JRopcode;
	wasJumpOut_prev = wasJumpOut;
end

// update expected /o prevs

always @(trigger)
begin
	flush_expected_prev = flush_expected;
	JRopcode_expected_prev = JRopcode_expected;
	wasJumpOut_expected_prev = wasJumpOut_expected;
end



// expected flush
initial
begin
	flush_expected = 1'bX;
end 

// expected wasJumpOut
initial
begin
	wasJumpOut_expected = 1'bX;
end 
// expected JRopcode[ 1 ]
initial
begin
	JRopcode_expected[1] = 1'bX;
end 
// expected JRopcode[ 0 ]
initial
begin
	JRopcode_expected[0] = 1'bX;
end 
// generate trigger
always @(flush_expected or flush or JRopcode_expected or JRopcode or wasJumpOut_expected or wasJumpOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected flush = %b | expected JRopcode = %b | expected wasJumpOut = %b | ",flush_expected_prev,JRopcode_expected_prev,wasJumpOut_expected_prev);
	$display("| real flush = %b | real JRopcode = %b | real wasJumpOut = %b | ",flush_prev,JRopcode_prev,wasJumpOut_prev);
`endif
	if (
		( flush_expected_prev !== 1'bx ) && ( flush_prev !== flush_expected_prev )
		&& ((flush_expected_prev !== last_flush_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flush :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flush_expected_prev);
		$display ("     Real value = %b", flush_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_flush_exp = flush_expected_prev;
	end
	if (
		( JRopcode_expected_prev[0] !== 1'bx ) && ( JRopcode_prev[0] !== JRopcode_expected_prev[0] )
		&& ((JRopcode_expected_prev[0] !== last_JRopcode_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JRopcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JRopcode_expected_prev);
		$display ("     Real value = %b", JRopcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_JRopcode_exp[0] = JRopcode_expected_prev[0];
	end
	if (
		( JRopcode_expected_prev[1] !== 1'bx ) && ( JRopcode_prev[1] !== JRopcode_expected_prev[1] )
		&& ((JRopcode_expected_prev[1] !== last_JRopcode_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JRopcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JRopcode_expected_prev);
		$display ("     Real value = %b", JRopcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_JRopcode_exp[1] = JRopcode_expected_prev[1];
	end
	if (
		( wasJumpOut_expected_prev !== 1'bx ) && ( wasJumpOut_prev !== wasJumpOut_expected_prev )
		&& ((wasJumpOut_expected_prev !== last_wasJumpOut_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wasJumpOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wasJumpOut_expected_prev);
		$display ("     Real value = %b", wasJumpOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_wasJumpOut_exp = wasJumpOut_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#80000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module hazardUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg isJR;
reg isJump;
reg mustBranch;
reg wasJump;
// wires                                               
wire flush;
wire [1:0] JRopcode;
wire wasJumpOut;

wire sampler;                             

// assign statements (if any)                          
hazardUnit i1 (
// port map - connection between master ports and signals/registers   
	.flush(flush),
	.isJR(isJR),
	.isJump(isJump),
	.JRopcode(JRopcode),
	.mustBranch(mustBranch),
	.wasJump(wasJump),
	.wasJumpOut(wasJumpOut)
);

// isJR
initial
begin
	isJR = 1'b1;
	isJR = #10000 1'b0;
	isJR = #30000 1'b1;
	isJR = #10000 1'b0;
	isJR = #10000 1'b1;
	isJR = #10000 1'b0;
end 

// isJump
initial
begin
	isJump = 1'b0;
	isJump = #10000 1'b1;
	isJump = #10000 1'b0;
	isJump = #20000 1'b1;
	isJump = #20000 1'b0;
end 

// mustBranch
initial
begin
	mustBranch = 1'b0;
	mustBranch = #20000 1'b1;
	mustBranch = #10000 1'b0;
	mustBranch = #10000 1'b1;
	mustBranch = #20000 1'b0;
end 

// wasJump
initial
begin
	wasJump = 1'b0;
	wasJump = #30000 1'b1;
	wasJump = #20000 1'b0;
	wasJump = #10000 1'b1;
	wasJump = #10000 1'b0;
end 

hazardUnit_vlg_sample_tst tb_sample (
	.isJR(isJR),
	.isJump(isJump),
	.mustBranch(mustBranch),
	.wasJump(wasJump),
	.sampler_tx(sampler)
);

hazardUnit_vlg_check_tst tb_out(
	.flush(flush),
	.JRopcode(JRopcode),
	.wasJumpOut(wasJumpOut),
	.sampler_rx(sampler)
);
endmodule

