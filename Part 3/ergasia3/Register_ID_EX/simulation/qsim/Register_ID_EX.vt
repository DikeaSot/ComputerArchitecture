// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/27/2021 10:42:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    register_ID_EX
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_ID_EX_vlg_sample_tst(
	ALUFunc,
	clock,
	immediate16,
	isBranch,
	isEOR,
	isJR,
	isJump,
	isLW,
	isMFPC,
	isPrintDigit,
	isR,
	isReadDigit,
	isSW,
	jumpShortAddr,
	R1AD,
	R1Reg,
	R2AD,
	R2Reg,
	wasJumpOut,
	sampler_tx
);
input [3:0] ALUFunc;
input  clock;
input [15:0] immediate16;
input  isBranch;
input  isEOR;
input  isJR;
input  isJump;
input  isLW;
input  isMFPC;
input  isPrintDigit;
input  isR;
input  isReadDigit;
input  isSW;
input [11:0] jumpShortAddr;
input [2:0] R1AD;
input [15:0] R1Reg;
input [2:0] R2AD;
input [15:0] R2Reg;
input  wasJumpOut;
output sampler_tx;

reg sample;
time current_time;
always @(ALUFunc or clock or immediate16 or isBranch or isEOR or isJR or isJump or isLW or isMFPC or isPrintDigit or isR or isReadDigit or isSW or jumpShortAddr or R1AD or R1Reg or R2AD or R2Reg or wasJumpOut)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module register_ID_EX_vlg_check_tst (
	ALUFunc_IDEX,
	clock_IDEX,
	immediate16_IDEX,
	isBranch_IDEX,
	isEOR_IDEX,
	isJR_IDEX,
	isJump_IDEX,
	isLW_IDEX,
	isMFPC_IDEX,
	isPrintDigit_IDEX,
	isR_IDEX,
	isReadDigit_IDEX,
	isSW_IDEX,
	jumpShortAddr_IDEX,
	R1AD_IDEX,
	R1Reg_IDEX,
	R2AD_IDEX,
	R2Reg_IDEX,
	wasJumpOut_IDEX,
	sampler_rx
);
input [3:0] ALUFunc_IDEX;
input  clock_IDEX;
input [15:0] immediate16_IDEX;
input  isBranch_IDEX;
input  isEOR_IDEX;
input  isJR_IDEX;
input  isJump_IDEX;
input  isLW_IDEX;
input  isMFPC_IDEX;
input  isPrintDigit_IDEX;
input  isR_IDEX;
input  isReadDigit_IDEX;
input  isSW_IDEX;
input [11:0] jumpShortAddr_IDEX;
input [2:0] R1AD_IDEX;
input [15:0] R1Reg_IDEX;
input [2:0] R2AD_IDEX;
input [15:0] R2Reg_IDEX;
input  wasJumpOut_IDEX;
input sampler_rx;

reg [3:0] ALUFunc_IDEX_expected;
reg  clock_IDEX_expected;
reg [15:0] immediate16_IDEX_expected;
reg  isBranch_IDEX_expected;
reg  isEOR_IDEX_expected;
reg  isJR_IDEX_expected;
reg  isJump_IDEX_expected;
reg  isLW_IDEX_expected;
reg  isMFPC_IDEX_expected;
reg  isPrintDigit_IDEX_expected;
reg  isR_IDEX_expected;
reg  isReadDigit_IDEX_expected;
reg  isSW_IDEX_expected;
reg [11:0] jumpShortAddr_IDEX_expected;
reg [2:0] R1AD_IDEX_expected;
reg [15:0] R1Reg_IDEX_expected;
reg [2:0] R2AD_IDEX_expected;
reg [15:0] R2Reg_IDEX_expected;
reg  wasJumpOut_IDEX_expected;

reg [3:0] ALUFunc_IDEX_prev;
reg  clock_IDEX_prev;
reg [15:0] immediate16_IDEX_prev;
reg  isBranch_IDEX_prev;
reg  isEOR_IDEX_prev;
reg  isJR_IDEX_prev;
reg  isJump_IDEX_prev;
reg  isLW_IDEX_prev;
reg  isMFPC_IDEX_prev;
reg  isPrintDigit_IDEX_prev;
reg  isR_IDEX_prev;
reg  isReadDigit_IDEX_prev;
reg  isSW_IDEX_prev;
reg [11:0] jumpShortAddr_IDEX_prev;
reg [2:0] R1AD_IDEX_prev;
reg [15:0] R1Reg_IDEX_prev;
reg [2:0] R2AD_IDEX_prev;
reg [15:0] R2Reg_IDEX_prev;
reg  wasJumpOut_IDEX_prev;

reg [3:0] ALUFunc_IDEX_expected_prev;
reg  clock_IDEX_expected_prev;
reg [15:0] immediate16_IDEX_expected_prev;
reg  isBranch_IDEX_expected_prev;
reg  isEOR_IDEX_expected_prev;
reg  isJR_IDEX_expected_prev;
reg  isJump_IDEX_expected_prev;
reg  isLW_IDEX_expected_prev;
reg  isMFPC_IDEX_expected_prev;
reg  isPrintDigit_IDEX_expected_prev;
reg  isR_IDEX_expected_prev;
reg  isReadDigit_IDEX_expected_prev;
reg  isSW_IDEX_expected_prev;
reg [11:0] jumpShortAddr_IDEX_expected_prev;
reg [2:0] R1AD_IDEX_expected_prev;
reg [15:0] R1Reg_IDEX_expected_prev;
reg [2:0] R2AD_IDEX_expected_prev;
reg [15:0] R2Reg_IDEX_expected_prev;
reg  wasJumpOut_IDEX_expected_prev;

reg [3:0] last_ALUFunc_IDEX_exp;
reg  last_clock_IDEX_exp;
reg [15:0] last_immediate16_IDEX_exp;
reg  last_isBranch_IDEX_exp;
reg  last_isEOR_IDEX_exp;
reg  last_isJR_IDEX_exp;
reg  last_isJump_IDEX_exp;
reg  last_isLW_IDEX_exp;
reg  last_isMFPC_IDEX_exp;
reg  last_isPrintDigit_IDEX_exp;
reg  last_isR_IDEX_exp;
reg  last_isReadDigit_IDEX_exp;
reg  last_isSW_IDEX_exp;
reg [11:0] last_jumpShortAddr_IDEX_exp;
reg [2:0] last_R1AD_IDEX_exp;
reg [15:0] last_R1Reg_IDEX_exp;
reg [2:0] last_R2AD_IDEX_exp;
reg [15:0] last_R2Reg_IDEX_exp;
reg  last_wasJumpOut_IDEX_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:19] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 19'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUFunc_IDEX_prev = ALUFunc_IDEX;
	clock_IDEX_prev = clock_IDEX;
	immediate16_IDEX_prev = immediate16_IDEX;
	isBranch_IDEX_prev = isBranch_IDEX;
	isEOR_IDEX_prev = isEOR_IDEX;
	isJR_IDEX_prev = isJR_IDEX;
	isJump_IDEX_prev = isJump_IDEX;
	isLW_IDEX_prev = isLW_IDEX;
	isMFPC_IDEX_prev = isMFPC_IDEX;
	isPrintDigit_IDEX_prev = isPrintDigit_IDEX;
	isR_IDEX_prev = isR_IDEX;
	isReadDigit_IDEX_prev = isReadDigit_IDEX;
	isSW_IDEX_prev = isSW_IDEX;
	jumpShortAddr_IDEX_prev = jumpShortAddr_IDEX;
	R1AD_IDEX_prev = R1AD_IDEX;
	R1Reg_IDEX_prev = R1Reg_IDEX;
	R2AD_IDEX_prev = R2AD_IDEX;
	R2Reg_IDEX_prev = R2Reg_IDEX;
	wasJumpOut_IDEX_prev = wasJumpOut_IDEX;
end

// update expected /o prevs

always @(trigger)
begin
	ALUFunc_IDEX_expected_prev = ALUFunc_IDEX_expected;
	clock_IDEX_expected_prev = clock_IDEX_expected;
	immediate16_IDEX_expected_prev = immediate16_IDEX_expected;
	isBranch_IDEX_expected_prev = isBranch_IDEX_expected;
	isEOR_IDEX_expected_prev = isEOR_IDEX_expected;
	isJR_IDEX_expected_prev = isJR_IDEX_expected;
	isJump_IDEX_expected_prev = isJump_IDEX_expected;
	isLW_IDEX_expected_prev = isLW_IDEX_expected;
	isMFPC_IDEX_expected_prev = isMFPC_IDEX_expected;
	isPrintDigit_IDEX_expected_prev = isPrintDigit_IDEX_expected;
	isR_IDEX_expected_prev = isR_IDEX_expected;
	isReadDigit_IDEX_expected_prev = isReadDigit_IDEX_expected;
	isSW_IDEX_expected_prev = isSW_IDEX_expected;
	jumpShortAddr_IDEX_expected_prev = jumpShortAddr_IDEX_expected;
	R1AD_IDEX_expected_prev = R1AD_IDEX_expected;
	R1Reg_IDEX_expected_prev = R1Reg_IDEX_expected;
	R2AD_IDEX_expected_prev = R2AD_IDEX_expected;
	R2Reg_IDEX_expected_prev = R2Reg_IDEX_expected;
	wasJumpOut_IDEX_expected_prev = wasJumpOut_IDEX_expected;
end


// expected ALUFunc_IDEX[ 3 ]
initial
begin
	ALUFunc_IDEX_expected[3] = 1'bX;
end 
// expected ALUFunc_IDEX[ 2 ]
initial
begin
	ALUFunc_IDEX_expected[2] = 1'bX;
end 
// expected ALUFunc_IDEX[ 1 ]
initial
begin
	ALUFunc_IDEX_expected[1] = 1'bX;
end 
// expected ALUFunc_IDEX[ 0 ]
initial
begin
	ALUFunc_IDEX_expected[0] = 1'bX;
end 

// expected clock_IDEX
initial
begin
	clock_IDEX_expected = 1'bX;
end 
// expected immediate16_IDEX[ 15 ]
initial
begin
	immediate16_IDEX_expected[15] = 1'bX;
end 
// expected immediate16_IDEX[ 14 ]
initial
begin
	immediate16_IDEX_expected[14] = 1'bX;
end 
// expected immediate16_IDEX[ 13 ]
initial
begin
	immediate16_IDEX_expected[13] = 1'bX;
end 
// expected immediate16_IDEX[ 12 ]
initial
begin
	immediate16_IDEX_expected[12] = 1'bX;
end 
// expected immediate16_IDEX[ 11 ]
initial
begin
	immediate16_IDEX_expected[11] = 1'bX;
end 
// expected immediate16_IDEX[ 10 ]
initial
begin
	immediate16_IDEX_expected[10] = 1'bX;
end 
// expected immediate16_IDEX[ 9 ]
initial
begin
	immediate16_IDEX_expected[9] = 1'bX;
end 
// expected immediate16_IDEX[ 8 ]
initial
begin
	immediate16_IDEX_expected[8] = 1'bX;
end 
// expected immediate16_IDEX[ 7 ]
initial
begin
	immediate16_IDEX_expected[7] = 1'bX;
end 
// expected immediate16_IDEX[ 6 ]
initial
begin
	immediate16_IDEX_expected[6] = 1'bX;
end 
// expected immediate16_IDEX[ 5 ]
initial
begin
	immediate16_IDEX_expected[5] = 1'bX;
end 
// expected immediate16_IDEX[ 4 ]
initial
begin
	immediate16_IDEX_expected[4] = 1'bX;
end 
// expected immediate16_IDEX[ 3 ]
initial
begin
	immediate16_IDEX_expected[3] = 1'bX;
end 
// expected immediate16_IDEX[ 2 ]
initial
begin
	immediate16_IDEX_expected[2] = 1'bX;
end 
// expected immediate16_IDEX[ 1 ]
initial
begin
	immediate16_IDEX_expected[1] = 1'bX;
end 
// expected immediate16_IDEX[ 0 ]
initial
begin
	immediate16_IDEX_expected[0] = 1'bX;
end 

// expected isBranch_IDEX
initial
begin
	isBranch_IDEX_expected = 1'bX;
end 

// expected isEOR_IDEX
initial
begin
	isEOR_IDEX_expected = 1'bX;
end 

// expected isJR_IDEX
initial
begin
	isJR_IDEX_expected = 1'bX;
end 

// expected isJump_IDEX
initial
begin
	isJump_IDEX_expected = 1'bX;
end 

// expected isLW_IDEX
initial
begin
	isLW_IDEX_expected = 1'bX;
end 

// expected isMFPC_IDEX
initial
begin
	isMFPC_IDEX_expected = 1'bX;
end 

// expected isPrintDigit_IDEX
initial
begin
	isPrintDigit_IDEX_expected = 1'bX;
end 

// expected isR_IDEX
initial
begin
	isR_IDEX_expected = 1'bX;
end 

// expected isReadDigit_IDEX
initial
begin
	isReadDigit_IDEX_expected = 1'bX;
end 

// expected isSW_IDEX
initial
begin
	isSW_IDEX_expected = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 11 ]
initial
begin
	jumpShortAddr_IDEX_expected[11] = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 10 ]
initial
begin
	jumpShortAddr_IDEX_expected[10] = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 9 ]
initial
begin
	jumpShortAddr_IDEX_expected[9] = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 8 ]
initial
begin
	jumpShortAddr_IDEX_expected[8] = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 7 ]
initial
begin
	jumpShortAddr_IDEX_expected[7] = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 6 ]
initial
begin
	jumpShortAddr_IDEX_expected[6] = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 5 ]
initial
begin
	jumpShortAddr_IDEX_expected[5] = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 4 ]
initial
begin
	jumpShortAddr_IDEX_expected[4] = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 3 ]
initial
begin
	jumpShortAddr_IDEX_expected[3] = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 2 ]
initial
begin
	jumpShortAddr_IDEX_expected[2] = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 1 ]
initial
begin
	jumpShortAddr_IDEX_expected[1] = 1'bX;
end 
// expected jumpShortAddr_IDEX[ 0 ]
initial
begin
	jumpShortAddr_IDEX_expected[0] = 1'bX;
end 
// expected R1AD_IDEX[ 2 ]
initial
begin
	R1AD_IDEX_expected[2] = 1'bX;
end 
// expected R1AD_IDEX[ 1 ]
initial
begin
	R1AD_IDEX_expected[1] = 1'bX;
end 
// expected R1AD_IDEX[ 0 ]
initial
begin
	R1AD_IDEX_expected[0] = 1'bX;
end 
// expected R1Reg_IDEX[ 15 ]
initial
begin
	R1Reg_IDEX_expected[15] = 1'bX;
end 
// expected R1Reg_IDEX[ 14 ]
initial
begin
	R1Reg_IDEX_expected[14] = 1'bX;
end 
// expected R1Reg_IDEX[ 13 ]
initial
begin
	R1Reg_IDEX_expected[13] = 1'bX;
end 
// expected R1Reg_IDEX[ 12 ]
initial
begin
	R1Reg_IDEX_expected[12] = 1'bX;
end 
// expected R1Reg_IDEX[ 11 ]
initial
begin
	R1Reg_IDEX_expected[11] = 1'bX;
end 
// expected R1Reg_IDEX[ 10 ]
initial
begin
	R1Reg_IDEX_expected[10] = 1'bX;
end 
// expected R1Reg_IDEX[ 9 ]
initial
begin
	R1Reg_IDEX_expected[9] = 1'bX;
end 
// expected R1Reg_IDEX[ 8 ]
initial
begin
	R1Reg_IDEX_expected[8] = 1'bX;
end 
// expected R1Reg_IDEX[ 7 ]
initial
begin
	R1Reg_IDEX_expected[7] = 1'bX;
end 
// expected R1Reg_IDEX[ 6 ]
initial
begin
	R1Reg_IDEX_expected[6] = 1'bX;
end 
// expected R1Reg_IDEX[ 5 ]
initial
begin
	R1Reg_IDEX_expected[5] = 1'bX;
end 
// expected R1Reg_IDEX[ 4 ]
initial
begin
	R1Reg_IDEX_expected[4] = 1'bX;
end 
// expected R1Reg_IDEX[ 3 ]
initial
begin
	R1Reg_IDEX_expected[3] = 1'bX;
end 
// expected R1Reg_IDEX[ 2 ]
initial
begin
	R1Reg_IDEX_expected[2] = 1'bX;
end 
// expected R1Reg_IDEX[ 1 ]
initial
begin
	R1Reg_IDEX_expected[1] = 1'bX;
end 
// expected R1Reg_IDEX[ 0 ]
initial
begin
	R1Reg_IDEX_expected[0] = 1'bX;
end 
// expected R2AD_IDEX[ 2 ]
initial
begin
	R2AD_IDEX_expected[2] = 1'bX;
end 
// expected R2AD_IDEX[ 1 ]
initial
begin
	R2AD_IDEX_expected[1] = 1'bX;
end 
// expected R2AD_IDEX[ 0 ]
initial
begin
	R2AD_IDEX_expected[0] = 1'bX;
end 
// expected R2Reg_IDEX[ 15 ]
initial
begin
	R2Reg_IDEX_expected[15] = 1'bX;
end 
// expected R2Reg_IDEX[ 14 ]
initial
begin
	R2Reg_IDEX_expected[14] = 1'bX;
end 
// expected R2Reg_IDEX[ 13 ]
initial
begin
	R2Reg_IDEX_expected[13] = 1'bX;
end 
// expected R2Reg_IDEX[ 12 ]
initial
begin
	R2Reg_IDEX_expected[12] = 1'bX;
end 
// expected R2Reg_IDEX[ 11 ]
initial
begin
	R2Reg_IDEX_expected[11] = 1'bX;
end 
// expected R2Reg_IDEX[ 10 ]
initial
begin
	R2Reg_IDEX_expected[10] = 1'bX;
end 
// expected R2Reg_IDEX[ 9 ]
initial
begin
	R2Reg_IDEX_expected[9] = 1'bX;
end 
// expected R2Reg_IDEX[ 8 ]
initial
begin
	R2Reg_IDEX_expected[8] = 1'bX;
end 
// expected R2Reg_IDEX[ 7 ]
initial
begin
	R2Reg_IDEX_expected[7] = 1'bX;
end 
// expected R2Reg_IDEX[ 6 ]
initial
begin
	R2Reg_IDEX_expected[6] = 1'bX;
end 
// expected R2Reg_IDEX[ 5 ]
initial
begin
	R2Reg_IDEX_expected[5] = 1'bX;
end 
// expected R2Reg_IDEX[ 4 ]
initial
begin
	R2Reg_IDEX_expected[4] = 1'bX;
end 
// expected R2Reg_IDEX[ 3 ]
initial
begin
	R2Reg_IDEX_expected[3] = 1'bX;
end 
// expected R2Reg_IDEX[ 2 ]
initial
begin
	R2Reg_IDEX_expected[2] = 1'bX;
end 
// expected R2Reg_IDEX[ 1 ]
initial
begin
	R2Reg_IDEX_expected[1] = 1'bX;
end 
// expected R2Reg_IDEX[ 0 ]
initial
begin
	R2Reg_IDEX_expected[0] = 1'bX;
end 

// expected wasJumpOut_IDEX
initial
begin
	wasJumpOut_IDEX_expected = 1'bX;
end 
// generate trigger
always @(ALUFunc_IDEX_expected or ALUFunc_IDEX or clock_IDEX_expected or clock_IDEX or immediate16_IDEX_expected or immediate16_IDEX or isBranch_IDEX_expected or isBranch_IDEX or isEOR_IDEX_expected or isEOR_IDEX or isJR_IDEX_expected or isJR_IDEX or isJump_IDEX_expected or isJump_IDEX or isLW_IDEX_expected or isLW_IDEX or isMFPC_IDEX_expected or isMFPC_IDEX or isPrintDigit_IDEX_expected or isPrintDigit_IDEX or isR_IDEX_expected or isR_IDEX or isReadDigit_IDEX_expected or isReadDigit_IDEX or isSW_IDEX_expected or isSW_IDEX or jumpShortAddr_IDEX_expected or jumpShortAddr_IDEX or R1AD_IDEX_expected or R1AD_IDEX or R1Reg_IDEX_expected or R1Reg_IDEX or R2AD_IDEX_expected or R2AD_IDEX or R2Reg_IDEX_expected or R2Reg_IDEX or wasJumpOut_IDEX_expected or wasJumpOut_IDEX)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUFunc_IDEX = %b | expected clock_IDEX = %b | expected immediate16_IDEX = %b | expected isBranch_IDEX = %b | expected isEOR_IDEX = %b | expected isJR_IDEX = %b | expected isJump_IDEX = %b | expected isLW_IDEX = %b | expected isMFPC_IDEX = %b | expected isPrintDigit_IDEX = %b | expected isR_IDEX = %b | expected isReadDigit_IDEX = %b | expected isSW_IDEX = %b | expected jumpShortAddr_IDEX = %b | expected R1AD_IDEX = %b | expected R1Reg_IDEX = %b | expected R2AD_IDEX = %b | expected R2Reg_IDEX = %b | expected wasJumpOut_IDEX = %b | ",ALUFunc_IDEX_expected_prev,clock_IDEX_expected_prev,immediate16_IDEX_expected_prev,isBranch_IDEX_expected_prev,isEOR_IDEX_expected_prev,isJR_IDEX_expected_prev,isJump_IDEX_expected_prev,isLW_IDEX_expected_prev,isMFPC_IDEX_expected_prev,isPrintDigit_IDEX_expected_prev,isR_IDEX_expected_prev,isReadDigit_IDEX_expected_prev,isSW_IDEX_expected_prev,jumpShortAddr_IDEX_expected_prev,R1AD_IDEX_expected_prev,R1Reg_IDEX_expected_prev,R2AD_IDEX_expected_prev,R2Reg_IDEX_expected_prev,wasJumpOut_IDEX_expected_prev);
	$display("| real ALUFunc_IDEX = %b | real clock_IDEX = %b | real immediate16_IDEX = %b | real isBranch_IDEX = %b | real isEOR_IDEX = %b | real isJR_IDEX = %b | real isJump_IDEX = %b | real isLW_IDEX = %b | real isMFPC_IDEX = %b | real isPrintDigit_IDEX = %b | real isR_IDEX = %b | real isReadDigit_IDEX = %b | real isSW_IDEX = %b | real jumpShortAddr_IDEX = %b | real R1AD_IDEX = %b | real R1Reg_IDEX = %b | real R2AD_IDEX = %b | real R2Reg_IDEX = %b | real wasJumpOut_IDEX = %b | ",ALUFunc_IDEX_prev,clock_IDEX_prev,immediate16_IDEX_prev,isBranch_IDEX_prev,isEOR_IDEX_prev,isJR_IDEX_prev,isJump_IDEX_prev,isLW_IDEX_prev,isMFPC_IDEX_prev,isPrintDigit_IDEX_prev,isR_IDEX_prev,isReadDigit_IDEX_prev,isSW_IDEX_prev,jumpShortAddr_IDEX_prev,R1AD_IDEX_prev,R1Reg_IDEX_prev,R2AD_IDEX_prev,R2Reg_IDEX_prev,wasJumpOut_IDEX_prev);
`endif
	if (
		( ALUFunc_IDEX_expected_prev[0] !== 1'bx ) && ( ALUFunc_IDEX_prev[0] !== ALUFunc_IDEX_expected_prev[0] )
		&& ((ALUFunc_IDEX_expected_prev[0] !== last_ALUFunc_IDEX_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUFunc_IDEX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUFunc_IDEX_expected_prev);
		$display ("     Real value = %b", ALUFunc_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUFunc_IDEX_exp[0] = ALUFunc_IDEX_expected_prev[0];
	end
	if (
		( ALUFunc_IDEX_expected_prev[1] !== 1'bx ) && ( ALUFunc_IDEX_prev[1] !== ALUFunc_IDEX_expected_prev[1] )
		&& ((ALUFunc_IDEX_expected_prev[1] !== last_ALUFunc_IDEX_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUFunc_IDEX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUFunc_IDEX_expected_prev);
		$display ("     Real value = %b", ALUFunc_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUFunc_IDEX_exp[1] = ALUFunc_IDEX_expected_prev[1];
	end
	if (
		( ALUFunc_IDEX_expected_prev[2] !== 1'bx ) && ( ALUFunc_IDEX_prev[2] !== ALUFunc_IDEX_expected_prev[2] )
		&& ((ALUFunc_IDEX_expected_prev[2] !== last_ALUFunc_IDEX_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUFunc_IDEX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUFunc_IDEX_expected_prev);
		$display ("     Real value = %b", ALUFunc_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUFunc_IDEX_exp[2] = ALUFunc_IDEX_expected_prev[2];
	end
	if (
		( ALUFunc_IDEX_expected_prev[3] !== 1'bx ) && ( ALUFunc_IDEX_prev[3] !== ALUFunc_IDEX_expected_prev[3] )
		&& ((ALUFunc_IDEX_expected_prev[3] !== last_ALUFunc_IDEX_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUFunc_IDEX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUFunc_IDEX_expected_prev);
		$display ("     Real value = %b", ALUFunc_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUFunc_IDEX_exp[3] = ALUFunc_IDEX_expected_prev[3];
	end
	if (
		( clock_IDEX_expected_prev !== 1'bx ) && ( clock_IDEX_prev !== clock_IDEX_expected_prev )
		&& ((clock_IDEX_expected_prev !== last_clock_IDEX_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_IDEX_expected_prev);
		$display ("     Real value = %b", clock_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clock_IDEX_exp = clock_IDEX_expected_prev;
	end
	if (
		( immediate16_IDEX_expected_prev[0] !== 1'bx ) && ( immediate16_IDEX_prev[0] !== immediate16_IDEX_expected_prev[0] )
		&& ((immediate16_IDEX_expected_prev[0] !== last_immediate16_IDEX_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[0] = immediate16_IDEX_expected_prev[0];
	end
	if (
		( immediate16_IDEX_expected_prev[1] !== 1'bx ) && ( immediate16_IDEX_prev[1] !== immediate16_IDEX_expected_prev[1] )
		&& ((immediate16_IDEX_expected_prev[1] !== last_immediate16_IDEX_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[1] = immediate16_IDEX_expected_prev[1];
	end
	if (
		( immediate16_IDEX_expected_prev[2] !== 1'bx ) && ( immediate16_IDEX_prev[2] !== immediate16_IDEX_expected_prev[2] )
		&& ((immediate16_IDEX_expected_prev[2] !== last_immediate16_IDEX_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[2] = immediate16_IDEX_expected_prev[2];
	end
	if (
		( immediate16_IDEX_expected_prev[3] !== 1'bx ) && ( immediate16_IDEX_prev[3] !== immediate16_IDEX_expected_prev[3] )
		&& ((immediate16_IDEX_expected_prev[3] !== last_immediate16_IDEX_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[3] = immediate16_IDEX_expected_prev[3];
	end
	if (
		( immediate16_IDEX_expected_prev[4] !== 1'bx ) && ( immediate16_IDEX_prev[4] !== immediate16_IDEX_expected_prev[4] )
		&& ((immediate16_IDEX_expected_prev[4] !== last_immediate16_IDEX_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[4] = immediate16_IDEX_expected_prev[4];
	end
	if (
		( immediate16_IDEX_expected_prev[5] !== 1'bx ) && ( immediate16_IDEX_prev[5] !== immediate16_IDEX_expected_prev[5] )
		&& ((immediate16_IDEX_expected_prev[5] !== last_immediate16_IDEX_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[5] = immediate16_IDEX_expected_prev[5];
	end
	if (
		( immediate16_IDEX_expected_prev[6] !== 1'bx ) && ( immediate16_IDEX_prev[6] !== immediate16_IDEX_expected_prev[6] )
		&& ((immediate16_IDEX_expected_prev[6] !== last_immediate16_IDEX_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[6] = immediate16_IDEX_expected_prev[6];
	end
	if (
		( immediate16_IDEX_expected_prev[7] !== 1'bx ) && ( immediate16_IDEX_prev[7] !== immediate16_IDEX_expected_prev[7] )
		&& ((immediate16_IDEX_expected_prev[7] !== last_immediate16_IDEX_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[7] = immediate16_IDEX_expected_prev[7];
	end
	if (
		( immediate16_IDEX_expected_prev[8] !== 1'bx ) && ( immediate16_IDEX_prev[8] !== immediate16_IDEX_expected_prev[8] )
		&& ((immediate16_IDEX_expected_prev[8] !== last_immediate16_IDEX_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[8] = immediate16_IDEX_expected_prev[8];
	end
	if (
		( immediate16_IDEX_expected_prev[9] !== 1'bx ) && ( immediate16_IDEX_prev[9] !== immediate16_IDEX_expected_prev[9] )
		&& ((immediate16_IDEX_expected_prev[9] !== last_immediate16_IDEX_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[9] = immediate16_IDEX_expected_prev[9];
	end
	if (
		( immediate16_IDEX_expected_prev[10] !== 1'bx ) && ( immediate16_IDEX_prev[10] !== immediate16_IDEX_expected_prev[10] )
		&& ((immediate16_IDEX_expected_prev[10] !== last_immediate16_IDEX_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[10] = immediate16_IDEX_expected_prev[10];
	end
	if (
		( immediate16_IDEX_expected_prev[11] !== 1'bx ) && ( immediate16_IDEX_prev[11] !== immediate16_IDEX_expected_prev[11] )
		&& ((immediate16_IDEX_expected_prev[11] !== last_immediate16_IDEX_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[11] = immediate16_IDEX_expected_prev[11];
	end
	if (
		( immediate16_IDEX_expected_prev[12] !== 1'bx ) && ( immediate16_IDEX_prev[12] !== immediate16_IDEX_expected_prev[12] )
		&& ((immediate16_IDEX_expected_prev[12] !== last_immediate16_IDEX_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[12] = immediate16_IDEX_expected_prev[12];
	end
	if (
		( immediate16_IDEX_expected_prev[13] !== 1'bx ) && ( immediate16_IDEX_prev[13] !== immediate16_IDEX_expected_prev[13] )
		&& ((immediate16_IDEX_expected_prev[13] !== last_immediate16_IDEX_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[13] = immediate16_IDEX_expected_prev[13];
	end
	if (
		( immediate16_IDEX_expected_prev[14] !== 1'bx ) && ( immediate16_IDEX_prev[14] !== immediate16_IDEX_expected_prev[14] )
		&& ((immediate16_IDEX_expected_prev[14] !== last_immediate16_IDEX_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[14] = immediate16_IDEX_expected_prev[14];
	end
	if (
		( immediate16_IDEX_expected_prev[15] !== 1'bx ) && ( immediate16_IDEX_prev[15] !== immediate16_IDEX_expected_prev[15] )
		&& ((immediate16_IDEX_expected_prev[15] !== last_immediate16_IDEX_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port immediate16_IDEX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", immediate16_IDEX_expected_prev);
		$display ("     Real value = %b", immediate16_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_immediate16_IDEX_exp[15] = immediate16_IDEX_expected_prev[15];
	end
	if (
		( isBranch_IDEX_expected_prev !== 1'bx ) && ( isBranch_IDEX_prev !== isBranch_IDEX_expected_prev )
		&& ((isBranch_IDEX_expected_prev !== last_isBranch_IDEX_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isBranch_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isBranch_IDEX_expected_prev);
		$display ("     Real value = %b", isBranch_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_isBranch_IDEX_exp = isBranch_IDEX_expected_prev;
	end
	if (
		( isEOR_IDEX_expected_prev !== 1'bx ) && ( isEOR_IDEX_prev !== isEOR_IDEX_expected_prev )
		&& ((isEOR_IDEX_expected_prev !== last_isEOR_IDEX_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isEOR_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isEOR_IDEX_expected_prev);
		$display ("     Real value = %b", isEOR_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_isEOR_IDEX_exp = isEOR_IDEX_expected_prev;
	end
	if (
		( isJR_IDEX_expected_prev !== 1'bx ) && ( isJR_IDEX_prev !== isJR_IDEX_expected_prev )
		&& ((isJR_IDEX_expected_prev !== last_isJR_IDEX_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isJR_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isJR_IDEX_expected_prev);
		$display ("     Real value = %b", isJR_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_isJR_IDEX_exp = isJR_IDEX_expected_prev;
	end
	if (
		( isJump_IDEX_expected_prev !== 1'bx ) && ( isJump_IDEX_prev !== isJump_IDEX_expected_prev )
		&& ((isJump_IDEX_expected_prev !== last_isJump_IDEX_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isJump_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isJump_IDEX_expected_prev);
		$display ("     Real value = %b", isJump_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_isJump_IDEX_exp = isJump_IDEX_expected_prev;
	end
	if (
		( isLW_IDEX_expected_prev !== 1'bx ) && ( isLW_IDEX_prev !== isLW_IDEX_expected_prev )
		&& ((isLW_IDEX_expected_prev !== last_isLW_IDEX_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isLW_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isLW_IDEX_expected_prev);
		$display ("     Real value = %b", isLW_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_isLW_IDEX_exp = isLW_IDEX_expected_prev;
	end
	if (
		( isMFPC_IDEX_expected_prev !== 1'bx ) && ( isMFPC_IDEX_prev !== isMFPC_IDEX_expected_prev )
		&& ((isMFPC_IDEX_expected_prev !== last_isMFPC_IDEX_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isMFPC_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isMFPC_IDEX_expected_prev);
		$display ("     Real value = %b", isMFPC_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_isMFPC_IDEX_exp = isMFPC_IDEX_expected_prev;
	end
	if (
		( isPrintDigit_IDEX_expected_prev !== 1'bx ) && ( isPrintDigit_IDEX_prev !== isPrintDigit_IDEX_expected_prev )
		&& ((isPrintDigit_IDEX_expected_prev !== last_isPrintDigit_IDEX_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isPrintDigit_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isPrintDigit_IDEX_expected_prev);
		$display ("     Real value = %b", isPrintDigit_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_isPrintDigit_IDEX_exp = isPrintDigit_IDEX_expected_prev;
	end
	if (
		( isR_IDEX_expected_prev !== 1'bx ) && ( isR_IDEX_prev !== isR_IDEX_expected_prev )
		&& ((isR_IDEX_expected_prev !== last_isR_IDEX_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isR_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isR_IDEX_expected_prev);
		$display ("     Real value = %b", isR_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_isR_IDEX_exp = isR_IDEX_expected_prev;
	end
	if (
		( isReadDigit_IDEX_expected_prev !== 1'bx ) && ( isReadDigit_IDEX_prev !== isReadDigit_IDEX_expected_prev )
		&& ((isReadDigit_IDEX_expected_prev !== last_isReadDigit_IDEX_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isReadDigit_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isReadDigit_IDEX_expected_prev);
		$display ("     Real value = %b", isReadDigit_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_isReadDigit_IDEX_exp = isReadDigit_IDEX_expected_prev;
	end
	if (
		( isSW_IDEX_expected_prev !== 1'bx ) && ( isSW_IDEX_prev !== isSW_IDEX_expected_prev )
		&& ((isSW_IDEX_expected_prev !== last_isSW_IDEX_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port isSW_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", isSW_IDEX_expected_prev);
		$display ("     Real value = %b", isSW_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_isSW_IDEX_exp = isSW_IDEX_expected_prev;
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[0] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[0] !== jumpShortAddr_IDEX_expected_prev[0] )
		&& ((jumpShortAddr_IDEX_expected_prev[0] !== last_jumpShortAddr_IDEX_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[0] = jumpShortAddr_IDEX_expected_prev[0];
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[1] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[1] !== jumpShortAddr_IDEX_expected_prev[1] )
		&& ((jumpShortAddr_IDEX_expected_prev[1] !== last_jumpShortAddr_IDEX_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[1] = jumpShortAddr_IDEX_expected_prev[1];
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[2] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[2] !== jumpShortAddr_IDEX_expected_prev[2] )
		&& ((jumpShortAddr_IDEX_expected_prev[2] !== last_jumpShortAddr_IDEX_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[2] = jumpShortAddr_IDEX_expected_prev[2];
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[3] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[3] !== jumpShortAddr_IDEX_expected_prev[3] )
		&& ((jumpShortAddr_IDEX_expected_prev[3] !== last_jumpShortAddr_IDEX_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[3] = jumpShortAddr_IDEX_expected_prev[3];
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[4] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[4] !== jumpShortAddr_IDEX_expected_prev[4] )
		&& ((jumpShortAddr_IDEX_expected_prev[4] !== last_jumpShortAddr_IDEX_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[4] = jumpShortAddr_IDEX_expected_prev[4];
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[5] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[5] !== jumpShortAddr_IDEX_expected_prev[5] )
		&& ((jumpShortAddr_IDEX_expected_prev[5] !== last_jumpShortAddr_IDEX_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[5] = jumpShortAddr_IDEX_expected_prev[5];
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[6] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[6] !== jumpShortAddr_IDEX_expected_prev[6] )
		&& ((jumpShortAddr_IDEX_expected_prev[6] !== last_jumpShortAddr_IDEX_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[6] = jumpShortAddr_IDEX_expected_prev[6];
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[7] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[7] !== jumpShortAddr_IDEX_expected_prev[7] )
		&& ((jumpShortAddr_IDEX_expected_prev[7] !== last_jumpShortAddr_IDEX_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[7] = jumpShortAddr_IDEX_expected_prev[7];
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[8] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[8] !== jumpShortAddr_IDEX_expected_prev[8] )
		&& ((jumpShortAddr_IDEX_expected_prev[8] !== last_jumpShortAddr_IDEX_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[8] = jumpShortAddr_IDEX_expected_prev[8];
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[9] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[9] !== jumpShortAddr_IDEX_expected_prev[9] )
		&& ((jumpShortAddr_IDEX_expected_prev[9] !== last_jumpShortAddr_IDEX_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[9] = jumpShortAddr_IDEX_expected_prev[9];
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[10] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[10] !== jumpShortAddr_IDEX_expected_prev[10] )
		&& ((jumpShortAddr_IDEX_expected_prev[10] !== last_jumpShortAddr_IDEX_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[10] = jumpShortAddr_IDEX_expected_prev[10];
	end
	if (
		( jumpShortAddr_IDEX_expected_prev[11] !== 1'bx ) && ( jumpShortAddr_IDEX_prev[11] !== jumpShortAddr_IDEX_expected_prev[11] )
		&& ((jumpShortAddr_IDEX_expected_prev[11] !== last_jumpShortAddr_IDEX_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jumpShortAddr_IDEX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jumpShortAddr_IDEX_expected_prev);
		$display ("     Real value = %b", jumpShortAddr_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_jumpShortAddr_IDEX_exp[11] = jumpShortAddr_IDEX_expected_prev[11];
	end
	if (
		( R1AD_IDEX_expected_prev[0] !== 1'bx ) && ( R1AD_IDEX_prev[0] !== R1AD_IDEX_expected_prev[0] )
		&& ((R1AD_IDEX_expected_prev[0] !== last_R1AD_IDEX_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1AD_IDEX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1AD_IDEX_expected_prev);
		$display ("     Real value = %b", R1AD_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R1AD_IDEX_exp[0] = R1AD_IDEX_expected_prev[0];
	end
	if (
		( R1AD_IDEX_expected_prev[1] !== 1'bx ) && ( R1AD_IDEX_prev[1] !== R1AD_IDEX_expected_prev[1] )
		&& ((R1AD_IDEX_expected_prev[1] !== last_R1AD_IDEX_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1AD_IDEX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1AD_IDEX_expected_prev);
		$display ("     Real value = %b", R1AD_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R1AD_IDEX_exp[1] = R1AD_IDEX_expected_prev[1];
	end
	if (
		( R1AD_IDEX_expected_prev[2] !== 1'bx ) && ( R1AD_IDEX_prev[2] !== R1AD_IDEX_expected_prev[2] )
		&& ((R1AD_IDEX_expected_prev[2] !== last_R1AD_IDEX_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1AD_IDEX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1AD_IDEX_expected_prev);
		$display ("     Real value = %b", R1AD_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_R1AD_IDEX_exp[2] = R1AD_IDEX_expected_prev[2];
	end
	if (
		( R1Reg_IDEX_expected_prev[0] !== 1'bx ) && ( R1Reg_IDEX_prev[0] !== R1Reg_IDEX_expected_prev[0] )
		&& ((R1Reg_IDEX_expected_prev[0] !== last_R1Reg_IDEX_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[0] = R1Reg_IDEX_expected_prev[0];
	end
	if (
		( R1Reg_IDEX_expected_prev[1] !== 1'bx ) && ( R1Reg_IDEX_prev[1] !== R1Reg_IDEX_expected_prev[1] )
		&& ((R1Reg_IDEX_expected_prev[1] !== last_R1Reg_IDEX_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[1] = R1Reg_IDEX_expected_prev[1];
	end
	if (
		( R1Reg_IDEX_expected_prev[2] !== 1'bx ) && ( R1Reg_IDEX_prev[2] !== R1Reg_IDEX_expected_prev[2] )
		&& ((R1Reg_IDEX_expected_prev[2] !== last_R1Reg_IDEX_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[2] = R1Reg_IDEX_expected_prev[2];
	end
	if (
		( R1Reg_IDEX_expected_prev[3] !== 1'bx ) && ( R1Reg_IDEX_prev[3] !== R1Reg_IDEX_expected_prev[3] )
		&& ((R1Reg_IDEX_expected_prev[3] !== last_R1Reg_IDEX_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[3] = R1Reg_IDEX_expected_prev[3];
	end
	if (
		( R1Reg_IDEX_expected_prev[4] !== 1'bx ) && ( R1Reg_IDEX_prev[4] !== R1Reg_IDEX_expected_prev[4] )
		&& ((R1Reg_IDEX_expected_prev[4] !== last_R1Reg_IDEX_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[4] = R1Reg_IDEX_expected_prev[4];
	end
	if (
		( R1Reg_IDEX_expected_prev[5] !== 1'bx ) && ( R1Reg_IDEX_prev[5] !== R1Reg_IDEX_expected_prev[5] )
		&& ((R1Reg_IDEX_expected_prev[5] !== last_R1Reg_IDEX_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[5] = R1Reg_IDEX_expected_prev[5];
	end
	if (
		( R1Reg_IDEX_expected_prev[6] !== 1'bx ) && ( R1Reg_IDEX_prev[6] !== R1Reg_IDEX_expected_prev[6] )
		&& ((R1Reg_IDEX_expected_prev[6] !== last_R1Reg_IDEX_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[6] = R1Reg_IDEX_expected_prev[6];
	end
	if (
		( R1Reg_IDEX_expected_prev[7] !== 1'bx ) && ( R1Reg_IDEX_prev[7] !== R1Reg_IDEX_expected_prev[7] )
		&& ((R1Reg_IDEX_expected_prev[7] !== last_R1Reg_IDEX_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[7] = R1Reg_IDEX_expected_prev[7];
	end
	if (
		( R1Reg_IDEX_expected_prev[8] !== 1'bx ) && ( R1Reg_IDEX_prev[8] !== R1Reg_IDEX_expected_prev[8] )
		&& ((R1Reg_IDEX_expected_prev[8] !== last_R1Reg_IDEX_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[8] = R1Reg_IDEX_expected_prev[8];
	end
	if (
		( R1Reg_IDEX_expected_prev[9] !== 1'bx ) && ( R1Reg_IDEX_prev[9] !== R1Reg_IDEX_expected_prev[9] )
		&& ((R1Reg_IDEX_expected_prev[9] !== last_R1Reg_IDEX_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[9] = R1Reg_IDEX_expected_prev[9];
	end
	if (
		( R1Reg_IDEX_expected_prev[10] !== 1'bx ) && ( R1Reg_IDEX_prev[10] !== R1Reg_IDEX_expected_prev[10] )
		&& ((R1Reg_IDEX_expected_prev[10] !== last_R1Reg_IDEX_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[10] = R1Reg_IDEX_expected_prev[10];
	end
	if (
		( R1Reg_IDEX_expected_prev[11] !== 1'bx ) && ( R1Reg_IDEX_prev[11] !== R1Reg_IDEX_expected_prev[11] )
		&& ((R1Reg_IDEX_expected_prev[11] !== last_R1Reg_IDEX_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[11] = R1Reg_IDEX_expected_prev[11];
	end
	if (
		( R1Reg_IDEX_expected_prev[12] !== 1'bx ) && ( R1Reg_IDEX_prev[12] !== R1Reg_IDEX_expected_prev[12] )
		&& ((R1Reg_IDEX_expected_prev[12] !== last_R1Reg_IDEX_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[12] = R1Reg_IDEX_expected_prev[12];
	end
	if (
		( R1Reg_IDEX_expected_prev[13] !== 1'bx ) && ( R1Reg_IDEX_prev[13] !== R1Reg_IDEX_expected_prev[13] )
		&& ((R1Reg_IDEX_expected_prev[13] !== last_R1Reg_IDEX_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[13] = R1Reg_IDEX_expected_prev[13];
	end
	if (
		( R1Reg_IDEX_expected_prev[14] !== 1'bx ) && ( R1Reg_IDEX_prev[14] !== R1Reg_IDEX_expected_prev[14] )
		&& ((R1Reg_IDEX_expected_prev[14] !== last_R1Reg_IDEX_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[14] = R1Reg_IDEX_expected_prev[14];
	end
	if (
		( R1Reg_IDEX_expected_prev[15] !== 1'bx ) && ( R1Reg_IDEX_prev[15] !== R1Reg_IDEX_expected_prev[15] )
		&& ((R1Reg_IDEX_expected_prev[15] !== last_R1Reg_IDEX_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1Reg_IDEX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R1Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_R1Reg_IDEX_exp[15] = R1Reg_IDEX_expected_prev[15];
	end
	if (
		( R2AD_IDEX_expected_prev[0] !== 1'bx ) && ( R2AD_IDEX_prev[0] !== R2AD_IDEX_expected_prev[0] )
		&& ((R2AD_IDEX_expected_prev[0] !== last_R2AD_IDEX_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2AD_IDEX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2AD_IDEX_expected_prev);
		$display ("     Real value = %b", R2AD_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_R2AD_IDEX_exp[0] = R2AD_IDEX_expected_prev[0];
	end
	if (
		( R2AD_IDEX_expected_prev[1] !== 1'bx ) && ( R2AD_IDEX_prev[1] !== R2AD_IDEX_expected_prev[1] )
		&& ((R2AD_IDEX_expected_prev[1] !== last_R2AD_IDEX_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2AD_IDEX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2AD_IDEX_expected_prev);
		$display ("     Real value = %b", R2AD_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_R2AD_IDEX_exp[1] = R2AD_IDEX_expected_prev[1];
	end
	if (
		( R2AD_IDEX_expected_prev[2] !== 1'bx ) && ( R2AD_IDEX_prev[2] !== R2AD_IDEX_expected_prev[2] )
		&& ((R2AD_IDEX_expected_prev[2] !== last_R2AD_IDEX_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2AD_IDEX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2AD_IDEX_expected_prev);
		$display ("     Real value = %b", R2AD_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_R2AD_IDEX_exp[2] = R2AD_IDEX_expected_prev[2];
	end
	if (
		( R2Reg_IDEX_expected_prev[0] !== 1'bx ) && ( R2Reg_IDEX_prev[0] !== R2Reg_IDEX_expected_prev[0] )
		&& ((R2Reg_IDEX_expected_prev[0] !== last_R2Reg_IDEX_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[0] = R2Reg_IDEX_expected_prev[0];
	end
	if (
		( R2Reg_IDEX_expected_prev[1] !== 1'bx ) && ( R2Reg_IDEX_prev[1] !== R2Reg_IDEX_expected_prev[1] )
		&& ((R2Reg_IDEX_expected_prev[1] !== last_R2Reg_IDEX_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[1] = R2Reg_IDEX_expected_prev[1];
	end
	if (
		( R2Reg_IDEX_expected_prev[2] !== 1'bx ) && ( R2Reg_IDEX_prev[2] !== R2Reg_IDEX_expected_prev[2] )
		&& ((R2Reg_IDEX_expected_prev[2] !== last_R2Reg_IDEX_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[2] = R2Reg_IDEX_expected_prev[2];
	end
	if (
		( R2Reg_IDEX_expected_prev[3] !== 1'bx ) && ( R2Reg_IDEX_prev[3] !== R2Reg_IDEX_expected_prev[3] )
		&& ((R2Reg_IDEX_expected_prev[3] !== last_R2Reg_IDEX_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[3] = R2Reg_IDEX_expected_prev[3];
	end
	if (
		( R2Reg_IDEX_expected_prev[4] !== 1'bx ) && ( R2Reg_IDEX_prev[4] !== R2Reg_IDEX_expected_prev[4] )
		&& ((R2Reg_IDEX_expected_prev[4] !== last_R2Reg_IDEX_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[4] = R2Reg_IDEX_expected_prev[4];
	end
	if (
		( R2Reg_IDEX_expected_prev[5] !== 1'bx ) && ( R2Reg_IDEX_prev[5] !== R2Reg_IDEX_expected_prev[5] )
		&& ((R2Reg_IDEX_expected_prev[5] !== last_R2Reg_IDEX_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[5] = R2Reg_IDEX_expected_prev[5];
	end
	if (
		( R2Reg_IDEX_expected_prev[6] !== 1'bx ) && ( R2Reg_IDEX_prev[6] !== R2Reg_IDEX_expected_prev[6] )
		&& ((R2Reg_IDEX_expected_prev[6] !== last_R2Reg_IDEX_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[6] = R2Reg_IDEX_expected_prev[6];
	end
	if (
		( R2Reg_IDEX_expected_prev[7] !== 1'bx ) && ( R2Reg_IDEX_prev[7] !== R2Reg_IDEX_expected_prev[7] )
		&& ((R2Reg_IDEX_expected_prev[7] !== last_R2Reg_IDEX_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[7] = R2Reg_IDEX_expected_prev[7];
	end
	if (
		( R2Reg_IDEX_expected_prev[8] !== 1'bx ) && ( R2Reg_IDEX_prev[8] !== R2Reg_IDEX_expected_prev[8] )
		&& ((R2Reg_IDEX_expected_prev[8] !== last_R2Reg_IDEX_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[8] = R2Reg_IDEX_expected_prev[8];
	end
	if (
		( R2Reg_IDEX_expected_prev[9] !== 1'bx ) && ( R2Reg_IDEX_prev[9] !== R2Reg_IDEX_expected_prev[9] )
		&& ((R2Reg_IDEX_expected_prev[9] !== last_R2Reg_IDEX_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[9] = R2Reg_IDEX_expected_prev[9];
	end
	if (
		( R2Reg_IDEX_expected_prev[10] !== 1'bx ) && ( R2Reg_IDEX_prev[10] !== R2Reg_IDEX_expected_prev[10] )
		&& ((R2Reg_IDEX_expected_prev[10] !== last_R2Reg_IDEX_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[10] = R2Reg_IDEX_expected_prev[10];
	end
	if (
		( R2Reg_IDEX_expected_prev[11] !== 1'bx ) && ( R2Reg_IDEX_prev[11] !== R2Reg_IDEX_expected_prev[11] )
		&& ((R2Reg_IDEX_expected_prev[11] !== last_R2Reg_IDEX_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[11] = R2Reg_IDEX_expected_prev[11];
	end
	if (
		( R2Reg_IDEX_expected_prev[12] !== 1'bx ) && ( R2Reg_IDEX_prev[12] !== R2Reg_IDEX_expected_prev[12] )
		&& ((R2Reg_IDEX_expected_prev[12] !== last_R2Reg_IDEX_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[12] = R2Reg_IDEX_expected_prev[12];
	end
	if (
		( R2Reg_IDEX_expected_prev[13] !== 1'bx ) && ( R2Reg_IDEX_prev[13] !== R2Reg_IDEX_expected_prev[13] )
		&& ((R2Reg_IDEX_expected_prev[13] !== last_R2Reg_IDEX_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[13] = R2Reg_IDEX_expected_prev[13];
	end
	if (
		( R2Reg_IDEX_expected_prev[14] !== 1'bx ) && ( R2Reg_IDEX_prev[14] !== R2Reg_IDEX_expected_prev[14] )
		&& ((R2Reg_IDEX_expected_prev[14] !== last_R2Reg_IDEX_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[14] = R2Reg_IDEX_expected_prev[14];
	end
	if (
		( R2Reg_IDEX_expected_prev[15] !== 1'bx ) && ( R2Reg_IDEX_prev[15] !== R2Reg_IDEX_expected_prev[15] )
		&& ((R2Reg_IDEX_expected_prev[15] !== last_R2Reg_IDEX_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2Reg_IDEX[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2Reg_IDEX_expected_prev);
		$display ("     Real value = %b", R2Reg_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_R2Reg_IDEX_exp[15] = R2Reg_IDEX_expected_prev[15];
	end
	if (
		( wasJumpOut_IDEX_expected_prev !== 1'bx ) && ( wasJumpOut_IDEX_prev !== wasJumpOut_IDEX_expected_prev )
		&& ((wasJumpOut_IDEX_expected_prev !== last_wasJumpOut_IDEX_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wasJumpOut_IDEX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wasJumpOut_IDEX_expected_prev);
		$display ("     Real value = %b", wasJumpOut_IDEX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_wasJumpOut_IDEX_exp = wasJumpOut_IDEX_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#80000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module register_ID_EX_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] ALUFunc;
reg clock;
reg [15:0] immediate16;
reg isBranch;
reg isEOR;
reg isJR;
reg isJump;
reg isLW;
reg isMFPC;
reg isPrintDigit;
reg isR;
reg isReadDigit;
reg isSW;
reg [11:0] jumpShortAddr;
reg [2:0] R1AD;
reg [15:0] R1Reg;
reg [2:0] R2AD;
reg [15:0] R2Reg;
reg wasJumpOut;
// wires                                               
wire [3:0] ALUFunc_IDEX;
wire clock_IDEX;
wire [15:0] immediate16_IDEX;
wire isBranch_IDEX;
wire isEOR_IDEX;
wire isJR_IDEX;
wire isJump_IDEX;
wire isLW_IDEX;
wire isMFPC_IDEX;
wire isPrintDigit_IDEX;
wire isR_IDEX;
wire isReadDigit_IDEX;
wire isSW_IDEX;
wire [11:0] jumpShortAddr_IDEX;
wire [2:0] R1AD_IDEX;
wire [15:0] R1Reg_IDEX;
wire [2:0] R2AD_IDEX;
wire [15:0] R2Reg_IDEX;
wire wasJumpOut_IDEX;

wire sampler;                             

// assign statements (if any)                          
register_ID_EX i1 (
// port map - connection between master ports and signals/registers   
	.ALUFunc(ALUFunc),
	.ALUFunc_IDEX(ALUFunc_IDEX),
	.clock(clock),
	.clock_IDEX(clock_IDEX),
	.immediate16(immediate16),
	.immediate16_IDEX(immediate16_IDEX),
	.isBranch(isBranch),
	.isBranch_IDEX(isBranch_IDEX),
	.isEOR(isEOR),
	.isEOR_IDEX(isEOR_IDEX),
	.isJR(isJR),
	.isJR_IDEX(isJR_IDEX),
	.isJump(isJump),
	.isJump_IDEX(isJump_IDEX),
	.isLW(isLW),
	.isLW_IDEX(isLW_IDEX),
	.isMFPC(isMFPC),
	.isMFPC_IDEX(isMFPC_IDEX),
	.isPrintDigit(isPrintDigit),
	.isPrintDigit_IDEX(isPrintDigit_IDEX),
	.isR(isR),
	.isR_IDEX(isR_IDEX),
	.isReadDigit(isReadDigit),
	.isReadDigit_IDEX(isReadDigit_IDEX),
	.isSW(isSW),
	.isSW_IDEX(isSW_IDEX),
	.jumpShortAddr(jumpShortAddr),
	.jumpShortAddr_IDEX(jumpShortAddr_IDEX),
	.R1AD(R1AD),
	.R1AD_IDEX(R1AD_IDEX),
	.R1Reg(R1Reg),
	.R1Reg_IDEX(R1Reg_IDEX),
	.R2AD(R2AD),
	.R2AD_IDEX(R2AD_IDEX),
	.R2Reg(R2Reg),
	.R2Reg_IDEX(R2Reg_IDEX),
	.wasJumpOut(wasJumpOut),
	.wasJumpOut_IDEX(wasJumpOut_IDEX)
);
// ALUFunc[ 3 ]
initial
begin
	ALUFunc[3] = 1'b0;
	ALUFunc[3] = #10000 1'b1;
	ALUFunc[3] = #10000 1'b0;
	ALUFunc[3] = #20000 1'b1;
	ALUFunc[3] = #20000 1'b0;
	ALUFunc[3] = #10000 1'b1;
end 
// ALUFunc[ 2 ]
initial
begin
	ALUFunc[2] = 1'b1;
	ALUFunc[2] = #10000 1'b0;
	ALUFunc[2] = #40000 1'b1;
	ALUFunc[2] = #10000 1'b0;
	ALUFunc[2] = #10000 1'b1;
end 
// ALUFunc[ 1 ]
initial
begin
	ALUFunc[1] = 1'b1;
	ALUFunc[1] = #30000 1'b0;
	ALUFunc[1] = #20000 1'b1;
	ALUFunc[1] = #10000 1'b0;
end 
// ALUFunc[ 0 ]
initial
begin
	ALUFunc[0] = 1'b1;
	ALUFunc[0] = #30000 1'b0;
	ALUFunc[0] = #10000 1'b1;
	ALUFunc[0] = #30000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// immediate16[ 15 ]
initial
begin
	immediate16[15] = 1'b1;
	immediate16[15] = #30000 1'b0;
	immediate16[15] = #20000 1'b1;
	immediate16[15] = #10000 1'b0;
end 
// immediate16[ 14 ]
initial
begin
	immediate16[14] = 1'b0;
	immediate16[14] = #10000 1'b1;
	immediate16[14] = #20000 1'b0;
	immediate16[14] = #40000 1'b1;
end 
// immediate16[ 13 ]
initial
begin
	immediate16[13] = 1'b0;
	immediate16[13] = #10000 1'b1;
	immediate16[13] = #20000 1'b0;
	immediate16[13] = #10000 1'b1;
	immediate16[13] = #10000 1'b0;
end 
// immediate16[ 12 ]
initial
begin
	immediate16[12] = 1'b1;
	immediate16[12] = #20000 1'b0;
	immediate16[12] = #10000 1'b1;
	immediate16[12] = #10000 1'b0;
	immediate16[12] = #10000 1'b1;
	immediate16[12] = #10000 1'b0;
end 
// immediate16[ 11 ]
initial
begin
	immediate16[11] = 1'b1;
	immediate16[11] = #10000 1'b0;
	immediate16[11] = #10000 1'b1;
	immediate16[11] = #10000 1'b0;
	immediate16[11] = #30000 1'b1;
	immediate16[11] = #10000 1'b0;
end 
// immediate16[ 10 ]
initial
begin
	immediate16[10] = 1'b1;
	immediate16[10] = #30000 1'b0;
end 
// immediate16[ 9 ]
initial
begin
	immediate16[9] = 1'b0;
	immediate16[9] = #10000 1'b1;
	immediate16[9] = #10000 1'b0;
	immediate16[9] = #30000 1'b1;
end 
// immediate16[ 8 ]
initial
begin
	immediate16[8] = 1'b1;
	immediate16[8] = #40000 1'b0;
	immediate16[8] = #20000 1'b1;
	immediate16[8] = #10000 1'b0;
end 
// immediate16[ 7 ]
initial
begin
	immediate16[7] = 1'b0;
	immediate16[7] = #20000 1'b1;
	immediate16[7] = #10000 1'b0;
	immediate16[7] = #10000 1'b1;
	immediate16[7] = #10000 1'b0;
	immediate16[7] = #20000 1'b1;
end 
// immediate16[ 6 ]
initial
begin
	immediate16[6] = 1'b0;
	immediate16[6] = #10000 1'b1;
	immediate16[6] = #40000 1'b0;
	immediate16[6] = #10000 1'b1;
	immediate16[6] = #10000 1'b0;
end 
// immediate16[ 5 ]
initial
begin
	immediate16[5] = 1'b1;
	immediate16[5] = #40000 1'b0;
	immediate16[5] = #10000 1'b1;
	immediate16[5] = #10000 1'b0;
	immediate16[5] = #10000 1'b1;
end 
// immediate16[ 4 ]
initial
begin
	immediate16[4] = 1'b0;
	immediate16[4] = #40000 1'b1;
	immediate16[4] = #10000 1'b0;
	immediate16[4] = #10000 1'b1;
end 
// immediate16[ 3 ]
initial
begin
	immediate16[3] = 1'b0;
	immediate16[3] = #10000 1'b1;
	immediate16[3] = #10000 1'b0;
	immediate16[3] = #10000 1'b1;
	immediate16[3] = #10000 1'b0;
	immediate16[3] = #10000 1'b1;
	immediate16[3] = #20000 1'b0;
end 
// immediate16[ 2 ]
initial
begin
	immediate16[2] = 1'b0;
	immediate16[2] = #10000 1'b1;
	immediate16[2] = #30000 1'b0;
	immediate16[2] = #20000 1'b1;
	immediate16[2] = #10000 1'b0;
end 
// immediate16[ 1 ]
initial
begin
	immediate16[1] = 1'b1;
	immediate16[1] = #10000 1'b0;
	immediate16[1] = #30000 1'b1;
	immediate16[1] = #10000 1'b0;
	immediate16[1] = #10000 1'b1;
	immediate16[1] = #10000 1'b0;
end 
// immediate16[ 0 ]
initial
begin
	immediate16[0] = 1'b0;
	immediate16[0] = #10000 1'b1;
	immediate16[0] = #10000 1'b0;
	immediate16[0] = #30000 1'b1;
	immediate16[0] = #10000 1'b0;
end 

// isBranch
initial
begin
	isBranch = 1'b1;
	isBranch = #20000 1'b0;
	isBranch = #20000 1'b1;
end 

// isEOR
initial
begin
	isEOR = 1'b1;
	isEOR = #30000 1'b0;
	isEOR = #10000 1'b1;
	isEOR = #10000 1'b0;
	isEOR = #10000 1'b1;
end 

// isJR
initial
begin
	isJR = 1'b1;
	isJR = #10000 1'b0;
	isJR = #10000 1'b1;
	isJR = #20000 1'b0;
	isJR = #10000 1'b1;
	isJR = #10000 1'b0;
	isJR = #10000 1'b1;
end 

// isJump
initial
begin
	isJump = 1'b0;
	isJump = #10000 1'b1;
	isJump = #20000 1'b0;
	isJump = #30000 1'b1;
end 

// isLW
initial
begin
	isLW = 1'b0;
	isLW = #20000 1'b1;
	isLW = #20000 1'b0;
	isLW = #10000 1'b1;
	isLW = #10000 1'b0;
	isLW = #10000 1'b1;
end 

// isMFPC
initial
begin
	isMFPC = 1'b0;
	isMFPC = #10000 1'b1;
	isMFPC = #10000 1'b0;
	isMFPC = #10000 1'b1;
	isMFPC = #10000 1'b0;
end 

// isPrintDigit
initial
begin
	isPrintDigit = 1'b1;
	isPrintDigit = #30000 1'b0;
	isPrintDigit = #40000 1'b1;
end 

// isR
initial
begin
	isR = 1'b1;
	isR = #10000 1'b0;
	isR = #10000 1'b1;
	isR = #10000 1'b0;
	isR = #20000 1'b1;
	isR = #10000 1'b0;
end 

// isReadDigit
initial
begin
	isReadDigit = 1'b1;
	isReadDigit = #10000 1'b0;
	isReadDigit = #30000 1'b1;
	isReadDigit = #20000 1'b0;
	isReadDigit = #10000 1'b1;
end 

// isSW
initial
begin
	isSW = 1'b0;
	isSW = #50000 1'b1;
end 
// jumpShortAddr[ 11 ]
initial
begin
	jumpShortAddr[11] = 1'b1;
	jumpShortAddr[11] = #50000 1'b0;
end 
// jumpShortAddr[ 10 ]
initial
begin
	jumpShortAddr[10] = 1'b0;
	jumpShortAddr[10] = #10000 1'b1;
	jumpShortAddr[10] = #50000 1'b0;
end 
// jumpShortAddr[ 9 ]
initial
begin
	jumpShortAddr[9] = 1'b0;
	jumpShortAddr[9] = #10000 1'b1;
	jumpShortAddr[9] = #20000 1'b0;
	jumpShortAddr[9] = #20000 1'b1;
	jumpShortAddr[9] = #10000 1'b0;
end 
// jumpShortAddr[ 8 ]
initial
begin
	jumpShortAddr[8] = 1'b0;
	jumpShortAddr[8] = #60000 1'b1;
end 
// jumpShortAddr[ 7 ]
initial
begin
	jumpShortAddr[7] = 1'b1;
	jumpShortAddr[7] = #30000 1'b0;
	jumpShortAddr[7] = #20000 1'b1;
end 
// jumpShortAddr[ 6 ]
initial
begin
	jumpShortAddr[6] = 1'b1;
	jumpShortAddr[6] = #50000 1'b0;
end 
// jumpShortAddr[ 5 ]
initial
begin
	jumpShortAddr[5] = 1'b0;
	jumpShortAddr[5] = #10000 1'b1;
	jumpShortAddr[5] = #20000 1'b0;
	jumpShortAddr[5] = #10000 1'b1;
	jumpShortAddr[5] = #10000 1'b0;
end 
// jumpShortAddr[ 4 ]
initial
begin
	jumpShortAddr[4] = 1'b1;
	jumpShortAddr[4] = #10000 1'b0;
	jumpShortAddr[4] = #20000 1'b1;
	jumpShortAddr[4] = #10000 1'b0;
	jumpShortAddr[4] = #10000 1'b1;
	jumpShortAddr[4] = #20000 1'b0;
end 
// jumpShortAddr[ 3 ]
initial
begin
	jumpShortAddr[3] = 1'b1;
	jumpShortAddr[3] = #10000 1'b0;
	jumpShortAddr[3] = #10000 1'b1;
	jumpShortAddr[3] = #10000 1'b0;
	jumpShortAddr[3] = #10000 1'b1;
	jumpShortAddr[3] = #20000 1'b0;
	jumpShortAddr[3] = #10000 1'b1;
end 
// jumpShortAddr[ 2 ]
initial
begin
	jumpShortAddr[2] = 1'b0;
	jumpShortAddr[2] = #20000 1'b1;
end 
// jumpShortAddr[ 1 ]
initial
begin
	jumpShortAddr[1] = 1'b1;
	jumpShortAddr[1] = #20000 1'b0;
	jumpShortAddr[1] = #20000 1'b1;
	jumpShortAddr[1] = #10000 1'b0;
	jumpShortAddr[1] = #20000 1'b1;
end 
// jumpShortAddr[ 0 ]
initial
begin
	jumpShortAddr[0] = 1'b1;
	jumpShortAddr[0] = #10000 1'b0;
	jumpShortAddr[0] = #20000 1'b1;
	jumpShortAddr[0] = #10000 1'b0;
end 
// R1AD[ 2 ]
initial
begin
	R1AD[2] = 1'b1;
	R1AD[2] = #50000 1'b0;
	R1AD[2] = #10000 1'b1;
	R1AD[2] = #10000 1'b0;
end 
// R1AD[ 1 ]
initial
begin
	R1AD[1] = 1'b1;
	R1AD[1] = #10000 1'b0;
	R1AD[1] = #10000 1'b1;
	R1AD[1] = #10000 1'b0;
	R1AD[1] = #10000 1'b1;
	R1AD[1] = #20000 1'b0;
end 
// R1AD[ 0 ]
initial
begin
	R1AD[0] = 1'b0;
	R1AD[0] = #10000 1'b1;
	R1AD[0] = #20000 1'b0;
	R1AD[0] = #10000 1'b1;
	R1AD[0] = #10000 1'b0;
	R1AD[0] = #20000 1'b1;
end 
// R1Reg[ 15 ]
initial
begin
	R1Reg[15] = 1'b1;
	R1Reg[15] = #20000 1'b0;
	R1Reg[15] = #10000 1'b1;
	R1Reg[15] = #20000 1'b0;
	R1Reg[15] = #10000 1'b1;
end 
// R1Reg[ 14 ]
initial
begin
	R1Reg[14] = 1'b1;
	R1Reg[14] = #10000 1'b0;
	R1Reg[14] = #30000 1'b1;
	R1Reg[14] = #10000 1'b0;
	R1Reg[14] = #10000 1'b1;
end 
// R1Reg[ 13 ]
initial
begin
	R1Reg[13] = 1'b1;
	R1Reg[13] = #10000 1'b0;
	R1Reg[13] = #10000 1'b1;
	R1Reg[13] = #10000 1'b0;
end 
// R1Reg[ 12 ]
initial
begin
	R1Reg[12] = 1'b0;
	R1Reg[12] = #50000 1'b1;
	R1Reg[12] = #20000 1'b0;
end 
// R1Reg[ 11 ]
initial
begin
	R1Reg[11] = 1'b0;
	R1Reg[11] = #10000 1'b1;
	R1Reg[11] = #10000 1'b0;
	R1Reg[11] = #20000 1'b1;
	R1Reg[11] = #10000 1'b0;
	R1Reg[11] = #20000 1'b1;
end 
// R1Reg[ 10 ]
initial
begin
	R1Reg[10] = 1'b1;
	R1Reg[10] = #10000 1'b0;
	R1Reg[10] = #10000 1'b1;
	R1Reg[10] = #20000 1'b0;
	R1Reg[10] = #10000 1'b1;
end 
// R1Reg[ 9 ]
initial
begin
	R1Reg[9] = 1'b1;
	R1Reg[9] = #10000 1'b0;
	R1Reg[9] = #10000 1'b1;
	R1Reg[9] = #10000 1'b0;
	R1Reg[9] = #20000 1'b1;
	R1Reg[9] = #10000 1'b0;
	R1Reg[9] = #10000 1'b1;
end 
// R1Reg[ 8 ]
initial
begin
	R1Reg[8] = 1'b1;
	R1Reg[8] = #30000 1'b0;
	R1Reg[8] = #10000 1'b1;
	R1Reg[8] = #10000 1'b0;
	R1Reg[8] = #10000 1'b1;
end 
// R1Reg[ 7 ]
initial
begin
	R1Reg[7] = 1'b1;
	R1Reg[7] = #10000 1'b0;
	R1Reg[7] = #10000 1'b1;
	R1Reg[7] = #20000 1'b0;
	R1Reg[7] = #10000 1'b1;
end 
// R1Reg[ 6 ]
initial
begin
	R1Reg[6] = 1'b1;
	R1Reg[6] = #10000 1'b0;
	R1Reg[6] = #40000 1'b1;
	R1Reg[6] = #20000 1'b0;
end 
// R1Reg[ 5 ]
initial
begin
	R1Reg[5] = 1'b0;
	R1Reg[5] = #10000 1'b1;
	R1Reg[5] = #30000 1'b0;
	R1Reg[5] = #10000 1'b1;
	R1Reg[5] = #10000 1'b0;
	R1Reg[5] = #10000 1'b1;
end 
// R1Reg[ 4 ]
initial
begin
	R1Reg[4] = 1'b0;
	R1Reg[4] = #10000 1'b1;
	R1Reg[4] = #10000 1'b0;
	R1Reg[4] = #10000 1'b1;
	R1Reg[4] = #10000 1'b0;
	R1Reg[4] = #20000 1'b1;
end 
// R1Reg[ 3 ]
initial
begin
	R1Reg[3] = 1'b0;
	R1Reg[3] = #10000 1'b1;
	R1Reg[3] = #10000 1'b0;
	R1Reg[3] = #40000 1'b1;
end 
// R1Reg[ 2 ]
initial
begin
	R1Reg[2] = 1'b1;
	R1Reg[2] = #70000 1'b0;
end 
// R1Reg[ 1 ]
initial
begin
	R1Reg[1] = 1'b1;
	R1Reg[1] = #40000 1'b0;
end 
// R1Reg[ 0 ]
initial
begin
	R1Reg[0] = 1'b0;
	R1Reg[0] = #60000 1'b1;
	R1Reg[0] = #10000 1'b0;
end 
// R2AD[ 2 ]
initial
begin
	R2AD[2] = 1'b1;
	R2AD[2] = #60000 1'b0;
	R2AD[2] = #10000 1'b1;
end 
// R2AD[ 1 ]
initial
begin
	R2AD[1] = 1'b1;
	R2AD[1] = #30000 1'b0;
	R2AD[1] = #20000 1'b1;
end 
// R2AD[ 0 ]
initial
begin
	R2AD[0] = 1'b0;
	R2AD[0] = #30000 1'b1;
	R2AD[0] = #10000 1'b0;
	R2AD[0] = #10000 1'b1;
	R2AD[0] = #10000 1'b0;
end 
// R2Reg[ 15 ]
initial
begin
	R2Reg[15] = 1'b1;
	R2Reg[15] = #40000 1'b0;
	R2Reg[15] = #20000 1'b1;
end 
// R2Reg[ 14 ]
initial
begin
	R2Reg[14] = 1'b0;
	R2Reg[14] = #20000 1'b1;
	R2Reg[14] = #10000 1'b0;
	R2Reg[14] = #10000 1'b1;
end 
// R2Reg[ 13 ]
initial
begin
	R2Reg[13] = 1'b1;
	R2Reg[13] = #20000 1'b0;
	R2Reg[13] = #20000 1'b1;
	R2Reg[13] = #20000 1'b0;
	R2Reg[13] = #10000 1'b1;
end 
// R2Reg[ 12 ]
initial
begin
	R2Reg[12] = 1'b0;
	R2Reg[12] = #10000 1'b1;
	R2Reg[12] = #10000 1'b0;
	R2Reg[12] = #10000 1'b1;
	R2Reg[12] = #20000 1'b0;
	R2Reg[12] = #20000 1'b1;
end 
// R2Reg[ 11 ]
initial
begin
	R2Reg[11] = 1'b0;
	R2Reg[11] = #20000 1'b1;
	R2Reg[11] = #20000 1'b0;
	R2Reg[11] = #10000 1'b1;
	R2Reg[11] = #10000 1'b0;
end 
// R2Reg[ 10 ]
initial
begin
	R2Reg[10] = 1'b0;
	R2Reg[10] = #10000 1'b1;
	R2Reg[10] = #10000 1'b0;
	R2Reg[10] = #20000 1'b1;
	R2Reg[10] = #20000 1'b0;
end 
// R2Reg[ 9 ]
initial
begin
	R2Reg[9] = 1'b1;
	R2Reg[9] = #20000 1'b0;
	R2Reg[9] = #10000 1'b1;
	R2Reg[9] = #20000 1'b0;
	R2Reg[9] = #20000 1'b1;
end 
// R2Reg[ 8 ]
initial
begin
	R2Reg[8] = 1'b0;
	R2Reg[8] = #70000 1'b1;
end 
// R2Reg[ 7 ]
initial
begin
	R2Reg[7] = 1'b0;
	R2Reg[7] = #10000 1'b1;
	R2Reg[7] = #10000 1'b0;
	R2Reg[7] = #20000 1'b1;
	R2Reg[7] = #10000 1'b0;
end 
// R2Reg[ 6 ]
initial
begin
	R2Reg[6] = 1'b0;
	R2Reg[6] = #30000 1'b1;
	R2Reg[6] = #10000 1'b0;
	R2Reg[6] = #10000 1'b1;
	R2Reg[6] = #20000 1'b0;
end 
// R2Reg[ 5 ]
initial
begin
	R2Reg[5] = 1'b1;
	R2Reg[5] = #40000 1'b0;
	R2Reg[5] = #30000 1'b1;
end 
// R2Reg[ 4 ]
initial
begin
	R2Reg[4] = 1'b1;
	R2Reg[4] = #70000 1'b0;
end 
// R2Reg[ 3 ]
initial
begin
	R2Reg[3] = 1'b1;
	R2Reg[3] = #10000 1'b0;
	R2Reg[3] = #20000 1'b1;
	R2Reg[3] = #30000 1'b0;
	R2Reg[3] = #10000 1'b1;
end 
// R2Reg[ 2 ]
initial
begin
	R2Reg[2] = 1'b0;
	R2Reg[2] = #60000 1'b1;
	R2Reg[2] = #10000 1'b0;
end 
// R2Reg[ 1 ]
initial
begin
	R2Reg[1] = 1'b0;
	R2Reg[1] = #50000 1'b1;
	R2Reg[1] = #20000 1'b0;
end 
// R2Reg[ 0 ]
initial
begin
	R2Reg[0] = 1'b0;
	R2Reg[0] = #10000 1'b1;
	R2Reg[0] = #10000 1'b0;
	R2Reg[0] = #20000 1'b1;
	R2Reg[0] = #20000 1'b0;
	R2Reg[0] = #10000 1'b1;
end 

// wasJumpOut
initial
begin
	wasJumpOut = 1'b1;
	wasJumpOut = #10000 1'b0;
	wasJumpOut = #10000 1'b1;
	wasJumpOut = #20000 1'b0;
	wasJumpOut = #10000 1'b1;
end 

register_ID_EX_vlg_sample_tst tb_sample (
	.ALUFunc(ALUFunc),
	.clock(clock),
	.immediate16(immediate16),
	.isBranch(isBranch),
	.isEOR(isEOR),
	.isJR(isJR),
	.isJump(isJump),
	.isLW(isLW),
	.isMFPC(isMFPC),
	.isPrintDigit(isPrintDigit),
	.isR(isR),
	.isReadDigit(isReadDigit),
	.isSW(isSW),
	.jumpShortAddr(jumpShortAddr),
	.R1AD(R1AD),
	.R1Reg(R1Reg),
	.R2AD(R2AD),
	.R2Reg(R2Reg),
	.wasJumpOut(wasJumpOut),
	.sampler_tx(sampler)
);

register_ID_EX_vlg_check_tst tb_out(
	.ALUFunc_IDEX(ALUFunc_IDEX),
	.clock_IDEX(clock_IDEX),
	.immediate16_IDEX(immediate16_IDEX),
	.isBranch_IDEX(isBranch_IDEX),
	.isEOR_IDEX(isEOR_IDEX),
	.isJR_IDEX(isJR_IDEX),
	.isJump_IDEX(isJump_IDEX),
	.isLW_IDEX(isLW_IDEX),
	.isMFPC_IDEX(isMFPC_IDEX),
	.isPrintDigit_IDEX(isPrintDigit_IDEX),
	.isR_IDEX(isR_IDEX),
	.isReadDigit_IDEX(isReadDigit_IDEX),
	.isSW_IDEX(isSW_IDEX),
	.jumpShortAddr_IDEX(jumpShortAddr_IDEX),
	.R1AD_IDEX(R1AD_IDEX),
	.R1Reg_IDEX(R1Reg_IDEX),
	.R2AD_IDEX(R2AD_IDEX),
	.R2Reg_IDEX(R2Reg_IDEX),
	.wasJumpOut_IDEX(wasJumpOut_IDEX),
	.sampler_rx(sampler)
);
endmodule

